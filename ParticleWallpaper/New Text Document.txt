<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Particle Connect</title>
    <style>
        body,
        html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
            background-color: #334D4D;
        }

        .container {
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        canvas {
            width: 100%;
            height: 100%;
        }
    </style>
</head>

<body>
    <div class="container">
        <canvas id="canvas"></canvas>
    </div>
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        class Particle {
            constructor(x, y, radius) {
                this.x = x;
                this.y = y;
                this.radius = radius;
                this.color = '#85AD99';
                this.velocity = {
                    x: (Math.random() - 0.5) * 2,
                    y: (Math.random() - 0.5) * 2
                };
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
                ctx.fillStyle = this.color;
                ctx.fill();
            }

            update(particles, mouseX, mouseY) {
                this.draw();

                for (let i = 0; i < particles.length; i++) {
                    if (this === particles[i]) continue;
                    let dx = this.x - particles[i].x;
                    let dy = this.y - particles[i].y;
                    let distance = Math.sqrt(dx * dx + dy * dy);

                    if (distance < 100) {
                        ctx.beginPath();
                        ctx.moveTo(this.x, this.y);
                        ctx.lineTo(particles[i].x, particles[i].y);
                        ctx.strokeStyle = '#85AD99';
                        ctx.stroke();
                        animateConnectingLine(this.x, this.y, particles[i].x, particles[i].y);
                    }
                }

                let dx = this.x - mouseX;
                let dy = this.y - mouseY;
                let distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < 100) {
                    ctx.beginPath();
                    ctx.moveTo(this.x, this.y);
                    ctx.lineTo(mouseX, mouseY);
                    ctx.strokeStyle = '#85AD99';
                    ctx.stroke();
                    animateConnectingLine(this.x, this.y, mouseX, mouseY);
                }

                this.x += this.velocity.x;
                this.y += this.velocity.y;

                if (Math.random() < 0.01) {
                    this.velocity.x = (Math.random() - 0.5) * 2;
                    this.velocity.y = (Math.random() - 0.5) * 2;
                }
            }
        }

        function animateConnectingLine(startX, startY, endX, endY) {
            let alpha = 1;
            const animationSpeed = 0.05;

            function animate() {
                ctx.save();
                ctx.globalAlpha = alpha;
                ctx.beginPath();
                ctx.moveTo(startX, startY);
                ctx.lineTo(endX, endY);
                ctx.strokeStyle = '#85AD99';
                ctx.stroke();
                ctx.restore();

                alpha -= animationSpeed;
                if (alpha <= 0) return;

                requestAnimationFrame(animate);
            }

            animate();
        }

        const particles = [];

        function init() {
            for (let i = 0; i < 100; i++) {
                const radius = 2;
                let x = Math.random() * (canvas.width - 2 * radius) + radius;
                let y = Math.random() * (canvas.height - 2 * radius) + radius;
                particles.push(new Particle(x, y, radius));
            }
        }

        let mouseX = 0;
        let mouseY = 0;

        canvas.addEventListener('mousemove', (event) => {
            mouseX = event.clientX;
            mouseY = event.clientY;
        });

        function animate() {
            requestAnimationFrame(animate);
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            particles.forEach(particle => {
                particle.update(particles, mouseX, mouseY);
            });
        }

        init();
        animate();
    </script>
</body>

</html>
